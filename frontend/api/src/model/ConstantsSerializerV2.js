/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Feature from './Feature';

/**
 * The ConstantsSerializerV2 model module.
 * @module model/ConstantsSerializerV2
 * @version 2.0.0
 */
class ConstantsSerializerV2 {
    /**
     * Constructs a new <code>ConstantsSerializerV2</code>.
     * Serialize statistics for the website.
     * @alias module:model/ConstantsSerializerV2
     * @param features {Array.<module:model/Feature>} Features used on the website to rate videos
     * @param searchDividerCoefficient {Number} divide search score by this value
     * @param searchFeatureConstantAdd {Number} add this value to Tournesol scores
     * @param recaptchaV2PublicKey {String} Public ReCaptcha key
     * @param youtubeVideoIdRegexSymbol {String} Regular expression of YouTube videos (one symbol)
     * @param minNumRateLater {Number} Minimal number of videos to rate before redirecting to rating page
     */
    constructor(features, searchDividerCoefficient, searchFeatureConstantAdd, recaptchaV2PublicKey, youtubeVideoIdRegexSymbol, minNumRateLater) { 
        
        ConstantsSerializerV2.initialize(this, features, searchDividerCoefficient, searchFeatureConstantAdd, recaptchaV2PublicKey, youtubeVideoIdRegexSymbol, minNumRateLater);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, features, searchDividerCoefficient, searchFeatureConstantAdd, recaptchaV2PublicKey, youtubeVideoIdRegexSymbol, minNumRateLater) { 
        obj['features'] = features;
        obj['search_divider_coefficient'] = searchDividerCoefficient;
        obj['search_feature_constant_add'] = searchFeatureConstantAdd;
        obj['recaptcha_v2_public_key'] = recaptchaV2PublicKey;
        obj['youtubeVideoIdRegexSymbol'] = youtubeVideoIdRegexSymbol;
        obj['minNumRateLater'] = minNumRateLater;
    }

    /**
     * Constructs a <code>ConstantsSerializerV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConstantsSerializerV2} obj Optional instance to populate.
     * @return {module:model/ConstantsSerializerV2} The populated <code>ConstantsSerializerV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConstantsSerializerV2();

            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [Feature]);
            }
            if (data.hasOwnProperty('search_divider_coefficient')) {
                obj['search_divider_coefficient'] = ApiClient.convertToType(data['search_divider_coefficient'], 'Number');
            }
            if (data.hasOwnProperty('search_feature_constant_add')) {
                obj['search_feature_constant_add'] = ApiClient.convertToType(data['search_feature_constant_add'], 'Number');
            }
            if (data.hasOwnProperty('recaptcha_v2_public_key')) {
                obj['recaptcha_v2_public_key'] = ApiClient.convertToType(data['recaptcha_v2_public_key'], 'String');
            }
            if (data.hasOwnProperty('youtubeVideoIdRegexSymbol')) {
                obj['youtubeVideoIdRegexSymbol'] = ApiClient.convertToType(data['youtubeVideoIdRegexSymbol'], 'String');
            }
            if (data.hasOwnProperty('minNumRateLater')) {
                obj['minNumRateLater'] = ApiClient.convertToType(data['minNumRateLater'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Features used on the website to rate videos
 * @member {Array.<module:model/Feature>} features
 */
ConstantsSerializerV2.prototype['features'] = undefined;

/**
 * divide search score by this value
 * @member {Number} search_divider_coefficient
 */
ConstantsSerializerV2.prototype['search_divider_coefficient'] = undefined;

/**
 * add this value to Tournesol scores
 * @member {Number} search_feature_constant_add
 */
ConstantsSerializerV2.prototype['search_feature_constant_add'] = undefined;

/**
 * Public ReCaptcha key
 * @member {String} recaptcha_v2_public_key
 */
ConstantsSerializerV2.prototype['recaptcha_v2_public_key'] = undefined;

/**
 * Regular expression of YouTube videos (one symbol)
 * @member {String} youtubeVideoIdRegexSymbol
 */
ConstantsSerializerV2.prototype['youtubeVideoIdRegexSymbol'] = undefined;

/**
 * Minimal number of videos to rate before redirecting to rating page
 * @member {Number} minNumRateLater
 */
ConstantsSerializerV2.prototype['minNumRateLater'] = undefined;






export default ConstantsSerializerV2;

