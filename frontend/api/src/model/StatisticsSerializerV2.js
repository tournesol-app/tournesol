/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StatisticsSerializerV2 model module.
 * @module model/StatisticsSerializerV2
 * @version 2.0.0
 */
class StatisticsSerializerV2 {
    /**
     * Constructs a new <code>StatisticsSerializerV2</code>.
     * Serialize statistics for the website.
     * @alias module:model/StatisticsSerializerV2
     * @param certifiedExperts {Number} Number of experts with certified e-mails
     * @param totalExperts {Number} Number of all experts
     * @param pairwiseComparisons {Number} Total number of pairwise comparisons
     * @param videos {Number} Total number of videos in the database
     * @param minScore {Number} Minimal aggregated score over all videos and features
     * @param maxScore {Number} Maximal aggregated score over all videos and features
     * @param weeklyActiveRatings {Number} Number of ratings added within a week
     * @param nRatedVideos {Number} Total number of videos with ratings
     * @param nSumComparisons {Number} Sum of all numbers of comparisons for all features
     * @param nLargelyRecommendedComparisons {Number} Number of comparisons for largely_recommended
     * @param nReliabilityComparisons {Number} Number of comparisons for reliability
     * @param nImportanceComparisons {Number} Number of comparisons for importance
     * @param nEngagingComparisons {Number} Number of comparisons for engaging
     * @param nPedagogyComparisons {Number} Number of comparisons for pedagogy
     * @param nLaymanFriendlyComparisons {Number} Number of comparisons for layman_friendly
     * @param nDiversityInclusionComparisons {Number} Number of comparisons for diversity_inclusion
     * @param nBackfireRiskComparisons {Number} Number of comparisons for backfire_risk
     * @param nBetterHabitsComparisons {Number} Number of comparisons for better_habits
     * @param nEntertainingRelaxingComparisons {Number} Number of comparisons for entertaining_relaxing
     */
    constructor(certifiedExperts, totalExperts, pairwiseComparisons, videos, minScore, maxScore, weeklyActiveRatings, nRatedVideos, nSumComparisons, nLargelyRecommendedComparisons, nReliabilityComparisons, nImportanceComparisons, nEngagingComparisons, nPedagogyComparisons, nLaymanFriendlyComparisons, nDiversityInclusionComparisons, nBackfireRiskComparisons, nBetterHabitsComparisons, nEntertainingRelaxingComparisons) { 
        
        StatisticsSerializerV2.initialize(this, certifiedExperts, totalExperts, pairwiseComparisons, videos, minScore, maxScore, weeklyActiveRatings, nRatedVideos, nSumComparisons, nLargelyRecommendedComparisons, nReliabilityComparisons, nImportanceComparisons, nEngagingComparisons, nPedagogyComparisons, nLaymanFriendlyComparisons, nDiversityInclusionComparisons, nBackfireRiskComparisons, nBetterHabitsComparisons, nEntertainingRelaxingComparisons);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certifiedExperts, totalExperts, pairwiseComparisons, videos, minScore, maxScore, weeklyActiveRatings, nRatedVideos, nSumComparisons, nLargelyRecommendedComparisons, nReliabilityComparisons, nImportanceComparisons, nEngagingComparisons, nPedagogyComparisons, nLaymanFriendlyComparisons, nDiversityInclusionComparisons, nBackfireRiskComparisons, nBetterHabitsComparisons, nEntertainingRelaxingComparisons) { 
        obj['certified_experts'] = certifiedExperts;
        obj['total_experts'] = totalExperts;
        obj['pairwise_comparisons'] = pairwiseComparisons;
        obj['videos'] = videos;
        obj['min_score'] = minScore;
        obj['max_score'] = maxScore;
        obj['weekly_active_ratings'] = weeklyActiveRatings;
        obj['n_rated_videos'] = nRatedVideos;
        obj['n_sum_comparisons'] = nSumComparisons;
        obj['n_largely_recommended_comparisons'] = nLargelyRecommendedComparisons;
        obj['n_reliability_comparisons'] = nReliabilityComparisons;
        obj['n_importance_comparisons'] = nImportanceComparisons;
        obj['n_engaging_comparisons'] = nEngagingComparisons;
        obj['n_pedagogy_comparisons'] = nPedagogyComparisons;
        obj['n_layman_friendly_comparisons'] = nLaymanFriendlyComparisons;
        obj['n_diversity_inclusion_comparisons'] = nDiversityInclusionComparisons;
        obj['n_backfire_risk_comparisons'] = nBackfireRiskComparisons;
        obj['n_better_habits_comparisons'] = nBetterHabitsComparisons;
        obj['n_entertaining_relaxing_comparisons'] = nEntertainingRelaxingComparisons;
    }

    /**
     * Constructs a <code>StatisticsSerializerV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatisticsSerializerV2} obj Optional instance to populate.
     * @return {module:model/StatisticsSerializerV2} The populated <code>StatisticsSerializerV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatisticsSerializerV2();

            if (data.hasOwnProperty('certified_experts')) {
                obj['certified_experts'] = ApiClient.convertToType(data['certified_experts'], 'Number');
            }
            if (data.hasOwnProperty('total_experts')) {
                obj['total_experts'] = ApiClient.convertToType(data['total_experts'], 'Number');
            }
            if (data.hasOwnProperty('pairwise_comparisons')) {
                obj['pairwise_comparisons'] = ApiClient.convertToType(data['pairwise_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = ApiClient.convertToType(data['videos'], 'Number');
            }
            if (data.hasOwnProperty('min_score')) {
                obj['min_score'] = ApiClient.convertToType(data['min_score'], 'Number');
            }
            if (data.hasOwnProperty('max_score')) {
                obj['max_score'] = ApiClient.convertToType(data['max_score'], 'Number');
            }
            if (data.hasOwnProperty('weekly_active_ratings')) {
                obj['weekly_active_ratings'] = ApiClient.convertToType(data['weekly_active_ratings'], 'Number');
            }
            if (data.hasOwnProperty('n_rated_videos')) {
                obj['n_rated_videos'] = ApiClient.convertToType(data['n_rated_videos'], 'Number');
            }
            if (data.hasOwnProperty('n_sum_comparisons')) {
                obj['n_sum_comparisons'] = ApiClient.convertToType(data['n_sum_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_largely_recommended_comparisons')) {
                obj['n_largely_recommended_comparisons'] = ApiClient.convertToType(data['n_largely_recommended_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_reliability_comparisons')) {
                obj['n_reliability_comparisons'] = ApiClient.convertToType(data['n_reliability_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_importance_comparisons')) {
                obj['n_importance_comparisons'] = ApiClient.convertToType(data['n_importance_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_engaging_comparisons')) {
                obj['n_engaging_comparisons'] = ApiClient.convertToType(data['n_engaging_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_pedagogy_comparisons')) {
                obj['n_pedagogy_comparisons'] = ApiClient.convertToType(data['n_pedagogy_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_layman_friendly_comparisons')) {
                obj['n_layman_friendly_comparisons'] = ApiClient.convertToType(data['n_layman_friendly_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_diversity_inclusion_comparisons')) {
                obj['n_diversity_inclusion_comparisons'] = ApiClient.convertToType(data['n_diversity_inclusion_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_backfire_risk_comparisons')) {
                obj['n_backfire_risk_comparisons'] = ApiClient.convertToType(data['n_backfire_risk_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_better_habits_comparisons')) {
                obj['n_better_habits_comparisons'] = ApiClient.convertToType(data['n_better_habits_comparisons'], 'Number');
            }
            if (data.hasOwnProperty('n_entertaining_relaxing_comparisons')) {
                obj['n_entertaining_relaxing_comparisons'] = ApiClient.convertToType(data['n_entertaining_relaxing_comparisons'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Number of experts with certified e-mails
 * @member {Number} certified_experts
 */
StatisticsSerializerV2.prototype['certified_experts'] = undefined;

/**
 * Number of all experts
 * @member {Number} total_experts
 */
StatisticsSerializerV2.prototype['total_experts'] = undefined;

/**
 * Total number of pairwise comparisons
 * @member {Number} pairwise_comparisons
 */
StatisticsSerializerV2.prototype['pairwise_comparisons'] = undefined;

/**
 * Total number of videos in the database
 * @member {Number} videos
 */
StatisticsSerializerV2.prototype['videos'] = undefined;

/**
 * Minimal aggregated score over all videos and features
 * @member {Number} min_score
 */
StatisticsSerializerV2.prototype['min_score'] = undefined;

/**
 * Maximal aggregated score over all videos and features
 * @member {Number} max_score
 */
StatisticsSerializerV2.prototype['max_score'] = undefined;

/**
 * Number of ratings added within a week
 * @member {Number} weekly_active_ratings
 */
StatisticsSerializerV2.prototype['weekly_active_ratings'] = undefined;

/**
 * Total number of videos with ratings
 * @member {Number} n_rated_videos
 */
StatisticsSerializerV2.prototype['n_rated_videos'] = undefined;

/**
 * Sum of all numbers of comparisons for all features
 * @member {Number} n_sum_comparisons
 */
StatisticsSerializerV2.prototype['n_sum_comparisons'] = undefined;

/**
 * Number of comparisons for largely_recommended
 * @member {Number} n_largely_recommended_comparisons
 */
StatisticsSerializerV2.prototype['n_largely_recommended_comparisons'] = undefined;

/**
 * Number of comparisons for reliability
 * @member {Number} n_reliability_comparisons
 */
StatisticsSerializerV2.prototype['n_reliability_comparisons'] = undefined;

/**
 * Number of comparisons for importance
 * @member {Number} n_importance_comparisons
 */
StatisticsSerializerV2.prototype['n_importance_comparisons'] = undefined;

/**
 * Number of comparisons for engaging
 * @member {Number} n_engaging_comparisons
 */
StatisticsSerializerV2.prototype['n_engaging_comparisons'] = undefined;

/**
 * Number of comparisons for pedagogy
 * @member {Number} n_pedagogy_comparisons
 */
StatisticsSerializerV2.prototype['n_pedagogy_comparisons'] = undefined;

/**
 * Number of comparisons for layman_friendly
 * @member {Number} n_layman_friendly_comparisons
 */
StatisticsSerializerV2.prototype['n_layman_friendly_comparisons'] = undefined;

/**
 * Number of comparisons for diversity_inclusion
 * @member {Number} n_diversity_inclusion_comparisons
 */
StatisticsSerializerV2.prototype['n_diversity_inclusion_comparisons'] = undefined;

/**
 * Number of comparisons for backfire_risk
 * @member {Number} n_backfire_risk_comparisons
 */
StatisticsSerializerV2.prototype['n_backfire_risk_comparisons'] = undefined;

/**
 * Number of comparisons for better_habits
 * @member {Number} n_better_habits_comparisons
 */
StatisticsSerializerV2.prototype['n_better_habits_comparisons'] = undefined;

/**
 * Number of comparisons for entertaining_relaxing
 * @member {Number} n_entertaining_relaxing_comparisons
 */
StatisticsSerializerV2.prototype['n_entertaining_relaxing_comparisons'] = undefined;






export default StatisticsSerializerV2;

