/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedVideoCommentsSerializerV2List from '../model/PaginatedVideoCommentsSerializerV2List';
import PatchedVideoCommentsSerializerV2 from '../model/PatchedVideoCommentsSerializerV2';
import VideoCommentsSerializerV2 from '../model/VideoCommentsSerializerV2';

/**
* VideoComments service.
* @module api/VideoCommentsApi
* @version 2.0.0
*/
export default class VideoCommentsApi {

    /**
    * Constructs a new VideoCommentsApi. 
    * @alias module:api/VideoCommentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2VideoCommentsSetMark operation.
     * @callback module:api/VideoCommentsApi~apiV2VideoCommentsSetMarkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoCommentsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a comment with a flag (like/dislike/red flag).
     * @param {module:model/String} action Delete or add the marker, one of ['add', 'delete', 'toggle']
     * @param {Number} id A unique integer value identifying this video comment.
     * @param {module:model/String} marker The marker to set, one of ['votes_plus', 'votes_minus', 'red_flags']
     * @param {module:api/VideoCommentsApi~apiV2VideoCommentsSetMarkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoCommentsSerializerV2}
     */
    apiV2VideoCommentsSetMark(action, id, marker, callback) {
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling apiV2VideoCommentsSetMark");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2VideoCommentsSetMark");
      }
      // verify the required parameter 'marker' is set
      if (marker === undefined || marker === null) {
        throw new Error("Missing the required parameter 'marker' when calling apiV2VideoCommentsSetMark");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'action': action,
        'marker': marker
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoCommentsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/video_comments/{id}/set_mark/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoCommentsCreate operation.
     * @callback module:api/VideoCommentsApi~videoCommentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoCommentsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Comment on a video
     * @param {module:model/VideoCommentsSerializerV2} videoCommentsSerializerV2 
     * @param {module:api/VideoCommentsApi~videoCommentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoCommentsSerializerV2}
     */
    videoCommentsCreate(videoCommentsSerializerV2, callback) {
      let postBody = videoCommentsSerializerV2;
      // verify the required parameter 'videoCommentsSerializerV2' is set
      if (videoCommentsSerializerV2 === undefined || videoCommentsSerializerV2 === null) {
        throw new Error("Missing the required parameter 'videoCommentsSerializerV2' when calling videoCommentsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VideoCommentsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/video_comments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoCommentsList operation.
     * @callback module:api/VideoCommentsApi~videoCommentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVideoCommentsSerializerV2List} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and filter comments
     * @param {Object} opts Optional parameters
     * @param {String} opts.backfireRisk backfire_risk
     * @param {String} opts.betterHabits better_habits
     * @param {String} opts.comment comment
     * @param {String} opts.diversityInclusion diversity_inclusion
     * @param {String} opts.engaging engaging
     * @param {String} opts.entertainingRelaxing entertaining_relaxing
     * @param {String} opts.importance importance
     * @param {String} opts.largelyRecommended largely_recommended
     * @param {String} opts.laymanFriendly layman_friendly
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.parentComment parent_comment
     * @param {String} opts.pedagogy pedagogy
     * @param {String} opts.reliability reliability
     * @param {String} opts.userUserUsername user__user__username
     * @param {String} opts.videoVideoId video__video_id
     * @param {module:api/VideoCommentsApi~videoCommentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVideoCommentsSerializerV2List}
     */
    videoCommentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'backfire_risk': opts['backfireRisk'],
        'better_habits': opts['betterHabits'],
        'comment': opts['comment'],
        'diversity_inclusion': opts['diversityInclusion'],
        'engaging': opts['engaging'],
        'entertaining_relaxing': opts['entertainingRelaxing'],
        'importance': opts['importance'],
        'largely_recommended': opts['largelyRecommended'],
        'layman_friendly': opts['laymanFriendly'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'parent_comment': opts['parentComment'],
        'pedagogy': opts['pedagogy'],
        'reliability': opts['reliability'],
        'user__user__username': opts['userUserUsername'],
        'video__video_id': opts['videoVideoId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVideoCommentsSerializerV2List;
      return this.apiClient.callApi(
        '/api/v2/video_comments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoCommentsPartialUpdate operation.
     * @callback module:api/VideoCommentsApi~videoCommentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoCommentsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change some fields in a comment
     * @param {Number} id A unique integer value identifying this video comment.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedVideoCommentsSerializerV2} opts.patchedVideoCommentsSerializerV2 
     * @param {module:api/VideoCommentsApi~videoCommentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoCommentsSerializerV2}
     */
    videoCommentsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedVideoCommentsSerializerV2'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling videoCommentsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VideoCommentsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/video_comments/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoCommentsRetrieve operation.
     * @callback module:api/VideoCommentsApi~videoCommentsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoCommentsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one comment
     * @param {Number} id A unique integer value identifying this video comment.
     * @param {module:api/VideoCommentsApi~videoCommentsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoCommentsSerializerV2}
     */
    videoCommentsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling videoCommentsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoCommentsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/video_comments/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoCommentsUpdate operation.
     * @callback module:api/VideoCommentsApi~videoCommentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoCommentsSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change all fields in a comment
     * @param {Number} id A unique integer value identifying this video comment.
     * @param {module:model/VideoCommentsSerializerV2} videoCommentsSerializerV2 
     * @param {module:api/VideoCommentsApi~videoCommentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoCommentsSerializerV2}
     */
    videoCommentsUpdate(id, videoCommentsSerializerV2, callback) {
      let postBody = videoCommentsSerializerV2;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling videoCommentsUpdate");
      }
      // verify the required parameter 'videoCommentsSerializerV2' is set
      if (videoCommentsSerializerV2 === undefined || videoCommentsSerializerV2 === null) {
        throw new Error("Missing the required parameter 'videoCommentsSerializerV2' when calling videoCommentsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VideoCommentsSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/video_comments/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
