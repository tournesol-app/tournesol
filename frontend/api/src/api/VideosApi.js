/**
 * Tournesol API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NumberOfThanks from '../model/NumberOfThanks';
import PaginatedVideoSerializerV2List from '../model/PaginatedVideoSerializerV2List';
import PrivateOrPublic from '../model/PrivateOrPublic';
import VideoSerializerV2 from '../model/VideoSerializerV2';

/**
* Videos service.
* @module api/VideosApi
* @version 2.0.0
*/
export default class VideosApi {

    /**
    * Constructs a new VideosApi. 
    * @alias module:api/VideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2VideoSearchTournesol operation.
     * @callback module:api/VideosApi~apiV2VideoSearchTournesolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVideoSerializerV2List} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search videos using the Tournesol algorithm.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.backfireRisk Resilience to backfiring risks [preference override]
     * @param {Number} opts.betterHabits Encourages better habits [preference override]
     * @param {String} opts.daysAgoGte Upload date, older than x days ago
     * @param {String} opts.daysAgoLte Upload date, more recent than x days ago
     * @param {Number} opts.diversityInclusion Diversity and Inclusion [preference override]
     * @param {String} opts.durationGte duration_gte
     * @param {String} opts.durationLte duration_lte
     * @param {Number} opts.engaging Engaging and thought-provoking [preference override]
     * @param {Number} opts.entertainingRelaxing Entertaining and relaxing [preference override]
     * @param {Number} opts.importance Important and actionable [preference override]
     * @param {String} opts.language language
     * @param {Number} opts.laymanFriendly Layman-friendly [preference override]
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.pedagogy Clear and pedagogical [preference override]
     * @param {Number} opts.reliability Reliable and not misleading [preference override]
     * @param {String} opts.search Search string
     * @param {String} opts.searchModel Use this user's algorithmic representative
     * @param {String} opts.showAllMyVideos Show all my videos in search
     * @param {String} opts.videoId video_id
     * @param {String} opts.viewsGte views_gte
     * @param {String} opts.viewsLte views_lte
     * @param {module:api/VideosApi~apiV2VideoSearchTournesolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVideoSerializerV2List}
     */
    apiV2VideoSearchTournesol(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'backfire_risk': opts['backfireRisk'],
        'better_habits': opts['betterHabits'],
        'days_ago_gte': opts['daysAgoGte'],
        'days_ago_lte': opts['daysAgoLte'],
        'diversity_inclusion': opts['diversityInclusion'],
        'duration_gte': opts['durationGte'],
        'duration_lte': opts['durationLte'],
        'engaging': opts['engaging'],
        'entertaining_relaxing': opts['entertainingRelaxing'],
        'importance': opts['importance'],
        'language': opts['language'],
        'layman_friendly': opts['laymanFriendly'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering'],
        'pedagogy': opts['pedagogy'],
        'reliability': opts['reliability'],
        'search': opts['search'],
        'search_model': opts['searchModel'],
        'show_all_my_videos': opts['showAllMyVideos'],
        'video_id': opts['videoId'],
        'views_gte': opts['viewsGte'],
        'views_lte': opts['viewsLte']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVideoSerializerV2List;
      return this.apiClient.callApi(
        '/api/v2/videos/search_tournesol/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2VideoSearchYoutube operation.
     * @callback module:api/VideosApi~apiV2VideoSearchYoutubeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVideoSerializerV2List} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search videos using the YouTube algorithm.
     * @param {String} search Youtube search phrase
     * @param {Object} opts Optional parameters
     * @param {String} opts.daysAgoGte Upload date, older than x days ago
     * @param {String} opts.daysAgoLte Upload date, more recent than x days ago
     * @param {String} opts.durationGte duration_gte
     * @param {String} opts.durationLte duration_lte
     * @param {String} opts.language language
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts.showAllMyVideos Show all my videos in search
     * @param {String} opts.videoId video_id
     * @param {String} opts.viewsGte views_gte
     * @param {String} opts.viewsLte views_lte
     * @param {module:api/VideosApi~apiV2VideoSearchYoutubeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVideoSerializerV2List}
     */
    apiV2VideoSearchYoutube(search, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling apiV2VideoSearchYoutube");
      }

      let pathParams = {
      };
      let queryParams = {
        'days_ago_gte': opts['daysAgoGte'],
        'days_ago_lte': opts['daysAgoLte'],
        'duration_gte': opts['durationGte'],
        'duration_lte': opts['durationLte'],
        'language': opts['language'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering'],
        'search': search,
        'show_all_my_videos': opts['showAllMyVideos'],
        'video_id': opts['videoId'],
        'views_gte': opts['viewsGte'],
        'views_lte': opts['viewsLte']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVideoSerializerV2List;
      return this.apiClient.callApi(
        '/api/v2/videos/search_youtube/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myRatingsArePrivate operation.
     * @callback module:api/VideosApi~myRatingsArePrivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateOrPublic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Are my ratings private?
     * @param {String} videoId Youtube Video ID
     * @param {module:api/VideosApi~myRatingsArePrivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateOrPublic}
     */
    myRatingsArePrivate(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling myRatingsArePrivate");
      }

      let pathParams = {
      };
      let queryParams = {
        'video_id': videoId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateOrPublic;
      return this.apiClient.callApi(
        '/api/v2/videos/my_ratings_are_private/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nThanks operation.
     * @callback module:api/VideosApi~nThanksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NumberOfThanks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get number of people I thanked for a video.
     * @param {String} videoId Youtube Video ID
     * @param {module:api/VideosApi~nThanksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NumberOfThanks}
     */
    nThanks(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling nThanks");
      }

      let pathParams = {
      };
      let queryParams = {
        'video_id': videoId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NumberOfThanks;
      return this.apiClient.callApi(
        '/api/v2/videos/n_thanks/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAllRatingPrivacy operation.
     * @callback module:api/VideosApi~setAllRatingPrivacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set all video rating privacy.
     * @param {Boolean} isPublic Should all ratings be public
     * @param {module:api/VideosApi~setAllRatingPrivacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setAllRatingPrivacy(isPublic, callback) {
      let postBody = null;
      // verify the required parameter 'isPublic' is set
      if (isPublic === undefined || isPublic === null) {
        throw new Error("Missing the required parameter 'isPublic' when calling setAllRatingPrivacy");
      }

      let pathParams = {
      };
      let queryParams = {
        'is_public': isPublic
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/videos/set_all_rating_privacy/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRatingPrivacy operation.
     * @callback module:api/VideosApi~setRatingPrivacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set video rating privacy.
     * @param {Boolean} isPublic Should the rating be public
     * @param {String} videoId Youtube Video ID
     * @param {module:api/VideosApi~setRatingPrivacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRatingPrivacy(isPublic, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'isPublic' is set
      if (isPublic === undefined || isPublic === null) {
        throw new Error("Missing the required parameter 'isPublic' when calling setRatingPrivacy");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling setRatingPrivacy");
      }

      let pathParams = {
      };
      let queryParams = {
        'is_public': isPublic,
        'video_id': videoId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/videos/set_rating_privacy/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the thankContributors operation.
     * @callback module:api/VideosApi~thankContributorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Thank contributors for the video.
     * @param {module:model/String} action Set/unset
     * @param {String} videoId Youtube Video ID
     * @param {module:api/VideosApi~thankContributorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    thankContributors(action, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling thankContributors");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling thankContributors");
      }

      let pathParams = {
      };
      let queryParams = {
        'action': action,
        'video_id': videoId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/videos/thank_contributors/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videosCreate operation.
     * @callback module:api/VideosApi~videosCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a video to the database (without filling the fields) from Youtube
     * @param {module:model/VideoSerializerV2} videoSerializerV2 
     * @param {module:api/VideosApi~videosCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoSerializerV2}
     */
    videosCreate(videoSerializerV2, callback) {
      let postBody = videoSerializerV2;
      // verify the required parameter 'videoSerializerV2' is set
      if (videoSerializerV2 === undefined || videoSerializerV2 === null) {
        throw new Error("Missing the required parameter 'videoSerializerV2' when calling videosCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VideoSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/videos/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videosList operation.
     * @callback module:api/VideosApi~videosListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVideoSerializerV2List} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all videos with search/filter capability
     * @param {Object} opts Optional parameters
     * @param {String} opts.daysAgoGte Upload date, older than x days ago
     * @param {String} opts.daysAgoLte Upload date, more recent than x days ago
     * @param {String} opts.durationGte duration_gte
     * @param {String} opts.durationLte duration_lte
     * @param {String} opts.language language
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts.search Search string
     * @param {String} opts.showAllMyVideos Show all my videos in search
     * @param {String} opts.videoId video_id
     * @param {String} opts.viewsGte views_gte
     * @param {String} opts.viewsLte views_lte
     * @param {module:api/VideosApi~videosListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVideoSerializerV2List}
     */
    videosList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'days_ago_gte': opts['daysAgoGte'],
        'days_ago_lte': opts['daysAgoLte'],
        'duration_gte': opts['durationGte'],
        'duration_lte': opts['durationLte'],
        'language': opts['language'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering'],
        'search': opts['search'],
        'show_all_my_videos': opts['showAllMyVideos'],
        'video_id': opts['videoId'],
        'views_gte': opts['viewsGte'],
        'views_lte': opts['viewsLte']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVideoSerializerV2List;
      return this.apiClient.callApi(
        '/api/v2/videos/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videosRatedVideosList operation.
     * @callback module:api/VideosApi~videosRatedVideosListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVideoSerializerV2List} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get videos and search results.
     * @param {Object} opts Optional parameters
     * @param {String} opts.daysAgoGte Upload date, older than x days ago
     * @param {String} opts.daysAgoLte Upload date, more recent than x days ago
     * @param {String} opts.durationGte duration_gte
     * @param {String} opts.durationLte duration_lte
     * @param {String} opts.language language
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts.search Search string
     * @param {String} opts.showAllMyVideos Show all my videos in search
     * @param {String} opts.videoId video_id
     * @param {String} opts.viewsGte views_gte
     * @param {String} opts.viewsLte views_lte
     * @param {module:api/VideosApi~videosRatedVideosListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVideoSerializerV2List}
     */
    videosRatedVideosList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'days_ago_gte': opts['daysAgoGte'],
        'days_ago_lte': opts['daysAgoLte'],
        'duration_gte': opts['durationGte'],
        'duration_lte': opts['durationLte'],
        'language': opts['language'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': opts['ordering'],
        'search': opts['search'],
        'show_all_my_videos': opts['showAllMyVideos'],
        'video_id': opts['videoId'],
        'views_gte': opts['viewsGte'],
        'views_lte': opts['viewsLte']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVideoSerializerV2List;
      return this.apiClient.callApi(
        '/api/v2/videos/rated_videos/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videosRetrieve operation.
     * @callback module:api/VideosApi~videosRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoSerializerV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one video by internal ID
     * @param {Number} id A unique integer value identifying this video.
     * @param {module:api/VideosApi~videosRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoSerializerV2}
     */
    videosRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling videosRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoSerializerV2;
      return this.apiClient.callApi(
        '/api/v2/videos/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
