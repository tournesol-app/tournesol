from solidago.voting_rights import VotingRights
from solidago.scoring_model import DirectScoringModel
from solidago.privacy_settings import PrivacySettings
from solidago.judgments import DataFrameJudgments
from solidago.pipeline import Pipeline

import pandas as pd
import numpy as np


np.random.seed(0)

#######################################
##                                   ##
##   Basic Generation of Test Data   ##
##                                   ##
#######################################

n_tests = 5

users = [
    pd.DataFrame(columns=["is_pretrusted"]),
    pd.DataFrame(dict(
        is_pretrusted=[True, False, False, True, True],
        trust_score=[0.8, 0.21333333333333335, 0.028444444444444446, 0.8037925925925926, 0.8]
    )),
    pd.DataFrame(dict(
        is_pretrusted=[True, False, False, True, True],
        trust_score=[0.8, 0.2171945701357466, 0.0, 0.8289592760180996, 0.8]
    ), index=[0, 4, 2, 8, 6]),
    pd.DataFrame(dict(
        is_pretrusted=(np.arange(5) % 3 == 0),
        trust_score=[0.8, 0.0, 0.0, 0.8, 0.21333333333333335],
        svd0=[1, 2, 5, 2, 1],
        svd1=[7, 2, 0, 1, 9]
    )),
    pd.DataFrame(dict(
        is_pretrusted=np.random.random(20) < 0.20,
        trust_score=[0.04478270804619478, 3.7355199183719185e-05, 0.03637379712287813,
            0.00214102869722107, 0.009943012913209853, 0.0001413345069935354,
            0.03476165169428667, 0.0023141842257231823, 0.0003555730318881166,
            0.017198996028511854, 7.978870514876874e-05, 0.040830925916064895, 
            0.0, 0.002020051872783562, 0.8449119837046595, 0.8000921460641155, 
            0.8028373541319094, 0.0042177586804884246, 0.0015930263323911784, 
            0.000788923880714716
        ],
        svd0=np.random.normal(0, 1, 20),
        svd1=np.random.normal(0, 1, 20),
        svd2=np.random.normal(0, 1, 20),
        svd3=np.random.normal(0, 1, 20),
        svd4=np.random.normal(0, 1, 20)
    ), index=2 * np.arange(20) + 3)
]
for u in users:
    u.index.name = "user_id"

vouches = [
    pd.DataFrame(columns=["voucher", "vouchee", "vouch"]),
    pd.DataFrame(dict(
        voucher=[0, 4, 1, 2],
        vouchee=[1, 1, 2, 3],
        vouch=[1, 1, 1, 1]
    )),
    pd.DataFrame(dict(
        voucher=[0, 4, 8, 2],
        vouchee=[4, 8, 4, 4],
        vouch=[1, 1, 1, 1]
    )),
    pd.DataFrame(dict(
        voucher=[0, 1, 2, 3],
        vouchee=[4, 4, 4, 4],
        vouch=[1, 1, 1, 1]
    )),
    pd.DataFrame(dict(
        voucher=2 * np.random.randint(0, 20, 80) + 3,
        vouchee=2 * np.random.randint(0, 20, 80) + 3,
        vouch=np.random.random(80)
    ))
]
vouches[4]["vouchee"] += 2 * (vouches[4]["vouchee"] == vouches[4]["voucher"])
vouches[4]["vouchee"] = ((vouches[4]["vouchee"] - 3) % 40) + 3

entities = [
    pd.DataFrame(),
    pd.DataFrame(index=[0, 1]),
    pd.DataFrame(index=[1, 6, 2]),
    pd.DataFrame(dict(
        svd0=[-1, 2, -1, 0, 0],
        svd1=[0, 0, 6, 4, 2]
    )),
    pd.DataFrame(dict(
        svd0=np.random.normal(0, 1, 50),
        svd1=np.random.normal(0, 1, 50),
        svd2=np.random.normal(0, 1, 50),
        svd3=np.random.normal(0, 1, 50),
        svd4=np.random.normal(0, 1, 50)
    ), index=3*np.arange(50) + 5)
]
for e in entities:
    e.index.name = "entity_id"

privacy = [
    PrivacySettings(),
    PrivacySettings({
        0: { 0: True,  1: True, 2: False, 3: True, 4: False },
        1: { 0: False, 1: True, 2: False, 3: True, 4: True }
    }),
    PrivacySettings({ 
        1: { 0: True,  4: True, 2: False, 8: True },
        6: { 0: False, 2: False, 8: True, 6: True },
        2: { 0: True, 4: True, 2: True, 6: True }
    }),
    PrivacySettings({
        0: { 0: True,  1: True, 2: False, 3: True, 4: False },
        1: { 1: True, 2: False, 3: True, 4: False },
        2: { 0: False,  1: True, 3: True, 4: False },
        3: { 0: True,  1: True, 3: True, 4: False },
        4: { 0: True,  1: True, 2: True, 3: True }
    }),
    PrivacySettings()
]
for _ in range(20 * 10):
    user = 2 * np.random.randint(20) + 3
    entity = 3 * np.random.randint(50) + 5
    privacy[4][user, entity] = (np.random.random() < 0.1)

judgments = [
    DataFrameJudgments(),
    DataFrameJudgments(pd.DataFrame(dict(
        user_id=[0, 1, 2, 3, 4],
        entity_a=[0, 0, 1, 0, 1],
        entity_b=[1, 1, 0, 1, 0],
        comparison=[-5, 3, -4, -8, -10],
        comparison_max=[10, 10, 10, 10, 10]
    ))),
    DataFrameJudgments(pd.DataFrame(dict(
        user_id=[0, 0, 0, 2, 2, 4, 6, 8],
        entity_a=[1, 2, 1, 2, 6, 1, 6, 1],
        entity_b=[6, 6, 2, 1, 1, 2, 2, 6],
        comparison=[-5, 3, -4, -8, -10, 2, 4, -4],
        comparison_max=[10, 10, 10, 10, 10, 10, 10, 10]
    ))),
    DataFrameJudgments(pd.DataFrame(dict(
        user_id= [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4],
        entity_a=[0, 2, 4, 0, 1, 4, 3, 4, 0, 2, 1, 0, 4, 0, 0, 0, 0, 2, 4, 0, 1, 2],
        entity_b=[2, 3, 3, 2, 2, 3, 2, 1, 4, 3, 0, 4, 1, 1, 2, 3, 4, 3, 3, 1, 2, 3],
        comparison=    [-5,3,-4,-3,-3, 2, 4,-4, 3, 2, 1, 3, 4, 1, 2, 1, 2, 0,-1, 2,-1,-2],
        comparison_max=[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    )))
]
judgments4 = list()
for user in users[4].index:
    user_entities = list(privacy[4].entities(user))
    for e_index, e in enumerate(user_entities):
        for f in user_entities[e_index + 1:]:
            if np.random.random() <= 0.2:
                continue
            comparison_max = np.random.random() * 10
            comparison = (2 * np.random.random() - 1) * comparison_max
            judgments4.append((user, e, f, comparison, comparison_max))
judgments.append(DataFrameJudgments(pd.DataFrame(dict(
    user_id=[j[0] for j in judgments4],
    entity_a=[j[1] for j in judgments4],
    entity_b=[j[2] for j in judgments4],
    comparison=[j[3] for j in judgments4],
    comparison_max=[j[4] for j in judgments4]    
))))


######################################
##                                  ##
##          Pipeline Data           ##
##                                  ##
######################################

voting_rights = [
    VotingRights(),
    VotingRights({
        0: {0: 0.5, 1: 0.5, 2: 1.0, 3: 0.5, 4: 1.0},
        1: {0: 1.0, 1: 0.5, 2: 1.0, 3: 0.5, 4: 0.5}
    }),
    VotingRights({
        1: {0: 0.5, 8: 0.5, 2: 1.0, 4: 0.5},
        2: {0: 0.5, 2: 0.5, 4: 0.5, 6: 0.5},
        6: {0: 1.0, 8: 0.5, 2: 1.0, 6: 0.5}
    }),
    VotingRights({
        0: {
            0: 0.44495224952697754,
            1: 0.44495224952697754,
            2: 0.8899044990539551,
            3: 0.44495224952697754,
            4: 0.8899044990539551
        },
        1: {
            1: 0.44577765464782715,
            2: 0.8915553092956543,
            3: 0.44577765464782715,
            4: 0.8915553092956543
        },
        2: {0: 1.0, 1: 0.5, 3: 0.5, 4: 1.0},
        3: {0: 0.5, 1: 0.5, 3: 0.5, 4: 1.0},
        4: {0: 0.5, 1: 0.5, 2: 0.5, 3: 0.5}
    }),
    VotingRights({
        128: {
            11: 0.9441285133361816,
            9: 0.9441285133361816,
            35: 0.9441285133361816,
            33: 0.9441285133361816
        },
        131: {
            27: 0.5129427909851074,
            9: 0.5129427909851074,
            3: 0.5129427909851074,
            13: 0.5129427909851074
        },
        5: {25: 0.6980299949645996, 11: 0.6980299949645996, 15: 0.6980299949645996},
        134: {
            3: 0.711280345916748,
            27: 0.711280345916748,
            31: 0.8449119837046595,
            23: 0.711280345916748
        },
        8: {35: 0.5},
        137: {
            33: 0.8000921460641155,
            3: 0.3970675468444824,
            37: 0.3970675468444824,
            5: 0.3970675468444824,
            15: 0.3970675468444824,
            21: 0.1985337734222412,
            29: 0.3970675468444824
        },
        11: {13: 0.6807961463928223, 29: 0.6807961463928223, 7: 0.6807961463928223},
        140: {27: 1.0, 31: 1.0},
        14: {27: 0.5, 37: 1.0},
        143: {41: 1.0, 39: 1.0},
        17: {17: 0.40119051933288574, 37: 0.8023810386657715, 5: 0.8023810386657715},
        146: {
            7: 0.6073603630065918,
            41: 0.6073603630065918,
            19: 0.6073603630065918,
            27: 0.3036801815032959,
            31: 0.8449119837046595
        },
        20: {33: 1.0, 23: 1.0},
        149: {
            33: 0.8000921460641155,
            5: 0.6936907768249512,
            13: 0.6936907768249512,
            41: 0.6936907768249512
        },
        23: {17: 1.0, 39: 1.0},
        152: {
            33: 0.8000921460641155,
            3: 0.5529541969299316,
            35: 0.8028373541319094,
            5: 0.5529541969299316,
            27: 0.5529541969299316,
            29: 0.5529541969299316
        },
        26: {
            9: 0.5106015205383301,
            27: 0.5106015205383301,
            5: 0.5106015205383301,
            7: 0.5106015205383301
        },
        29: {35: 1.0},
        32: {
            17: 0.5018458366394043,
            5: 0.5018458366394043,
            13: 0.5018458366394043,
            37: 0.5018458366394043
        },
        35: {
            33: 0.8000921460641155,
            35: 0.8028373541319094,
            37: 0.7253193855285645,
            11: 0.7253193855285645,
            23: 0.7253193855285645
        },
        38: {
            25: 0.844367504119873,
            31: 0.42245599185232974,
            37: 0.844367504119873,
            15: 0.4221837520599365
        },
        41: {35: 1.0},
        44: {
            7: 0.424710750579834,
            15: 0.424710750579834,
            19: 0.424710750579834,
            25: 0.424710750579834,
            27: 0.424710750579834
        },
        47: {3: 1.0},
        50: {
            41: 0.6943659782409668,
            27: 0.6943659782409668,
            29: 0.6943659782409668,
            33: 0.8000921460641155
        },
        53: {
            5: 0.31296777725219727,
            39: 0.31296777725219727,
            9: 0.31296777725219727,
            11: 0.31296777725219727,
            19: 0.15648388862609863,
            21: 0.31296777725219727,
            23: 0.31296777725219727
        },
        56: {
            3: 0.7234749794006348,
            41: 0.7234749794006348,
            35: 0.8028373541319094,
            7: 0.7234749794006348
        },
        59: {
            5: 0.3042721748352051,
            39: 0.3042721748352051,
            9: 0.3042721748352051,
            15: 0.3042721748352051,
            17: 0.3042721748352051,
            19: 0.3042721748352051,
            23: 0.3042721748352051,
            31: 0.8449119837046595
        },
        62: {19: 1.0, 13: 1.0},
        65: {
            11: 0.7276425361633301,
            3: 0.7276425361633301,
            15: 0.7276425361633301,
            31: 0.8449119837046595
        },
        68: {
            3: 0.48137903213500977,
            5: 0.48137903213500977,
            9: 0.48137903213500977,
            11: 0.48137903213500977,
            15: 0.24068951606750488,
            31: 0.8449119837046595
        },
        71: {
            37: 0.504371166229248,
            11: 0.504371166229248,
            13: 0.504371166229248,
            39: 0.504371166229248
        },
        74: {11: 0.5, 35: 1.0, 37: 1.0},
        77: {13: 1.0},
        80: {
            7: 0.3615734577178955,
            21: 0.723146915435791,
            25: 0.723146915435791,
            29: 0.3615734577178955,
            31: 0.8449119837046595
        },
        83: {9: 0.6726441383361816, 11: 0.6726441383361816, 37: 0.6726441383361816},
        86: {
            33: 0.8292813301086426,
            29: 0.8292813301086426,
            13: 0.8292813301086426,
            7: 0.4146406650543213
        },
        89: {
            3: 0.4257540702819824,
            7: 0.4257540702819824,
            41: 0.4257540702819824,
            15: 0.4257540702819824,
            19: 0.4257540702819824
        },
        92: {
            33: 0.8000921460641155,
            37: 0.18958449363708496,
            39: 0.3791689872741699,
            41: 0.3791689872741699,
            19: 0.3791689872741699,
            23: 0.3791689872741699,
            27: 0.3791689872741699
        },
        95: {
            27: 0.523521900177002,
            25: 0.523521900177002,
            11: 0.523521900177002,
            15: 0.523521900177002
        },
        98: {25: 0.6996045112609863, 3: 0.6996045112609863, 37: 0.6996045112609863},
        101: {13: 0.8012070655822754, 29: 0.4006035327911377, 39: 0.8012070655822754},
        104: {
            39: 0.4014401435852051,
            9: 0.4014401435852051,
            13: 0.4014401435852051,
            17: 0.4014401435852051,
            19: 0.4014401435852051
        },
        107: {
            25: 0.7269625663757324,
            3: 0.7269625663757324,
            29: 0.7269625663757324,
            31: 0.8449119837046595
        },
        110: {
            35: 0.8482851982116699,
            5: 0.8482851982116699,
            37: 0.8482851982116699,
            13: 0.42414259910583496,
            31: 0.8482851982116699
        },
        113: {41: 0.4043147563934326, 21: 0.8086295127868652, 29: 0.8086295127868652},
        116: {
            9: 0.5865187644958496,
            3: 0.5865187644958496,
            29: 0.2932593822479248,
            23: 0.5865187644958496
        },
        119: {17: 0.40061306953430176, 5: 0.8012261390686035, 39: 0.8012261390686035},
        122: {
            3: 0.5336165428161621,
            35: 0.8028373541319094,
            13: 0.5336165428161621,
            17: 0.5336165428161621,
            29: 0.5336165428161621
        },
         125: {41: 1.0, 5: 0.5}
    })
]

pipeline = Pipeline()

#preference_learned_models = [
#    #{
#        user: pipeline.preference_learning(judgments[test][user], entities[test])
#        for user, _ in users[test].iterrows()
#    } 
#    for test in range(n_tests)
#]

#user_models = [
#    pipeline.scaling(user_models[test], users[test], entities[test], voting_rights[test], privacy[test])
#    for test in range(n_tests)
#]

def print_user_models(models):
    return "[LINEBREAK" + ",LINEBREAK".join([
        "{LINEBREAK" + ",LINEBREAK".join([
            f"{user}: " + "{LINEBREAK" + ",LINEBREAK".join([
                f"{entity}: " + "LINEBREAK" + ",LINEBREAK".join([
                    str(preference_learned_models[test][user](
                        entity, entities[test].loc[entity]))
                ])
                for entity in preference_learned_models[test][user].scored_entities(entities[test])
            ]) + "}"
            for user in preference_learned_models[test]
        ]) + "}"
        for test in range(n_tests)
    ]) + "]"

