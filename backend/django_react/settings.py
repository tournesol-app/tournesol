"""
Django settings for django_react project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import gin
from path import Path

# for py2 compat
import builtins
import logging
builtins.basestring = str

# enable DEBUG log entries
if os.environ.get('DJANGO_LOGGING_DEBUG', None) is not None:
    logging.basicConfig()
    logging.getLogger().setLevel(logging.DEBUG)


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def load_gin_config(f):
    """Load gin configuration for ML models."""

    # if path is relative, adding BASE_DIR
    if not f.startswith('/'):
        f = os.path.join(BASE_DIR, f)

    # change directory temporarily to
    # allow for relative includes inside the gin file
    with Path(os.path.dirname(f)):
        gin.parse_config_file(f)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SENSITIVE VARIABLES

# postgres password
POSTGRES_DB_PASSWORD = os.environ.get('POSTGRES_DB_PASSWORD')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

DRF_RECAPTCHA_PUBLIC_KEY = os.environ.get('DRF_RECAPTCHA_PUBLIC_KEY')
DRF_RECAPTCHA_SECRET_KEY = os.environ.get('DRF_RECAPTCHA_SECRET_KEY')

# salt for hashing usernames
# keep this private, otherwise
# one can determine who is commenting anonymously
COMMENT_USERNAME_SALT = os.environ.get('COMMENT_USERNAME_SALT')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get('DJANGO_DEBUG', True)))
logging.info(f"Debug mode {DEBUG}")

# enable calls to Youtube search API
SEARCH_YOUTUBE_ENABLE = not os.environ.get('DISABLE_SEARCH_YOUTUBE', False)

if DEBUG is False:
    SECURE_HSTS_SECONDS = 3600
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_REFERRER_POLICY = 'same-origin'
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

ALLOWED_HOSTS = [
    'dev.tournesol.app',
    '127.0.0.1',
    'testserver',
    'tournesol.app',
    'www.tournesol.app',
    'staging.tournesol.app']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'backend.apps.BackendConfig',
    'rest_framework',
    'frontend',
    'django_extensions',
    'directory',
    'social_django',
    'django_filters',
    'languages',
    'django_email_verification',
    'computed_property',
    'drf_spectacular',
    'rest_framework.authtoken',
    'drf_recaptcha',
    'django_countries',
    'simple_history',
]

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']

AUTHENTICATION_BACKENDS = (
    'social_core.backends.open_id.OpenIdAuth',
    'social_core.backends.google.GoogleOpenId',
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.google.GoogleOAuth',
    'django.contrib.auth.backends.ModelBackend',
)


LOGIN_REDIRECT_URL = '/'

# directory listing
DIRECTORY_DIRECTORY = './.models'

# only allow users with directory.read permission
DIRECTORY_ACCESS_MODE = 'custom'
def DIRECTORY_ACCESS_FUNCTION(request): return request.user.is_superuser


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_react.get_username.RequestMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'django_react.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_react.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES_AVAILABLE = {
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'dev': {  # production
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'tournesol',
        'USER': 'tournesol',
        'PASSWORD': POSTGRES_DB_PASSWORD,
        'HOST': 'localhost',
        'PORT': '',
    },
    'staging': {  # staging
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'tournesol_staging',
        'USER': 'tournesol',
        'PASSWORD': POSTGRES_DB_PASSWORD,
        'HOST': 'localhost',
        'PORT': '',
    }
}


# https://stackoverflow.com/questions/11187123/django-runserver-custom-database
database = os.environ.get('DJANGO_DATABASE', 'sqlite')

if database == 'sqlite':
    EMAIL_PAGE_DOMAIN = 'http://127.0.0.1:8000/'
elif database == 'dev':
    EMAIL_PAGE_DOMAIN = 'https://www.tournesol.app/'
elif database == 'staging':
    EMAIL_PAGE_DOMAIN = 'https://staging.tournesol.app/'
else:
    raise ValueError(f"Database {database} is unknown")

DATABASES = {
    'default': DATABASES_AVAILABLE[database]
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'frontend', 'static', 'frontend'),
)

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),

    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 30,

    # important to have no basic auth here
    # as we are using Apache with basic auth
    # https://stackoverflow.com/questions/40094823/django-rest-framework-invalid-username-password
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication"
    ),

    # custom exception handling
    'EXCEPTION_HANDLER': 'backend.api_v2.exception.handler',

    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '10000/hour',
        'user': '1000000/hour'
    }
}

# enabling BasicAuth if asked to (used for tests)
if os.environ.get('DJANGO_REST_ENABLE_BASIC_AUTH'):
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'] += \
        ("rest_framework.authentication.BasicAuthentication",)

SPECTACULAR_SETTINGS = {
    'TITLE': 'Tournesol API',
    'VERSION': '2.0.0',

    # only expose v2 api
    'PREPROCESSING_HOOKS': ['backend.api_v2.helpers.remove_v1_api_hook'],
    'SCHEMA_PATH_PREFIX': '/api/v[0-9]'
}

NOTEBOOK_ARGUMENTS = [
    # exposes IP and port
    '--ip=0.0.0.0',
    '--port=8899',
    # disables the browser
    '--no-browser',
    '--allow-root',
]

# configurable email backend
EMAIL_BACKENDS = {
    'smtp': 'django.core.mail.backends.smtp.EmailBackend',
    'console': 'django.core.mail.backends.console.EmailBackend',
    'file': 'django.core.mail.backends.filebased.EmailBackend',
}

EMAIL_BACKEND = EMAIL_BACKENDS[os.environ.get('EMAIL_BACKEND', 'smtp')]
EMAIL_USE_SINGLE_THREAD = os.environ.get('EMAIL_USE_SINGLE_THREAD', None) is not None
EMAIL_FILE_PATH = '/tmp/app-messages'

# only send a second verification e-mail after that time has passed
EMAIL_SEND_EVERY_SECONDS = 3600

EMAIL_ACTIVE_FIELD = 'is_active'

# Outlook 365 config
EMAIL_SERVER = os.environ.get('DJANGO_EMAIL_SERVER', '127.0.0.1')
EMAIL_HOST = EMAIL_SERVER
EMAIL_PORT = int(os.environ.get('DJANGO_EMAIL_PORT', 25))
EMAIL_USE_TLS = os.environ.get('DJANGO_EMAIL_USE_TLS', '') == 'True'
EMAIL_USE_SSL = os.environ.get('DJANGO_EMAIL_USE_SSL', '') == 'True'
EMAIL_HOST_USER = os.environ.get('DJANGO_EMAIL_HOST_USER', 'noreply@tournesol.app')
EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_EMAIL_HOST_PASSWORD',
                                     'password_from_email_hosting')
EMAIL_PASSWORD = EMAIL_HOST_PASSWORD

DEFAULT_FROM_EMAIL = 'Tournesol.app <verification-noreply@tournesol.app>'
EMAIL_ADDRESS = 'verification-noreply@tournesol.app'
EMAIL_MAIL_SUBJECT = 'Please confirm your email'
EMAIL_MAIL_HTML = 'mail_body.html'
EMAIL_MAIL_PLAIN = 'mail_body.txt'
EMAIL_PAGE_TEMPLATE = 'confirm_template.html'

EMAIL_NEWDOMAIN_ADDRESS = 'pendingdomain-noreply@tournesol.app'
EMAIL_PASSWORDRESET_ADDRESS = 'passwordreset-noreply@tournesol.app'
ADMIN_EMAILS = ["len@tournesol.app", "sergei.volodin.ch@gmail.com"]

# for user profile pics
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Change to False to disable non-certified users
COUNT_UNCERTIFIED_USERS = False

# Google RECaptcha settings
if os.environ.get('DJANGO_DISABLE_RECAPTCHA') is not None:
    NOCAPTCHA = True
    DRF_RECAPTCHA_TESTING = True
    DRF_RECAPTCHA_TESTING_PASS = True
else:

    DRF_RECAPTCHA_DEFAULT_V3_SCORE = 0.5
    DRF_RECAPTCHA_TESTING = False
    NOCAPTCHA = False

# enable/disable Google analytics (disabled for integration tests)
ENABLE_ANALYTICS = os.environ.get('DJANGO_DISABLE_ANALYTICS', False) is False

# enable/disable embedded videos on the website
ENABLE_YOUTUBE_VIDEO_EMBED = os.environ.get('DJANGO_DISABLE_YOUTUBE', False) is False
