# Generated by Django 3.1.8 on 2021-05-03 20:03

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('backend', '0093_delete_videoreports'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalExpertRating',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('duration_ms', models.FloatField(default=0, help_text='Time it took to rate the videos (in milliseconds)', null=True)),
                ('datetime_lastedit', models.DateTimeField(blank=True, help_text='Time the rating was edited the last time', null=True)),
                ('datetime_add', models.DateTimeField(blank=True, editable=False, help_text='Time the rating was added', null=True)),
                ('reliability', models.FloatField(blank=True, default=None, help_text='Reliable and not misleading', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('reliability_weight', models.FloatField(default=1, help_text='Reliable and not misleading weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('importance', models.FloatField(blank=True, default=None, help_text='Important and actionable', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('importance_weight', models.FloatField(default=1, help_text='Important and actionable weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('engaging', models.FloatField(blank=True, default=None, help_text='Engaging and thought-provoking', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('engaging_weight', models.FloatField(default=1, help_text='Engaging and thought-provoking weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('pedagogy', models.FloatField(blank=True, default=None, help_text='Clear and pedagogical', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('pedagogy_weight', models.FloatField(default=1, help_text='Clear and pedagogical weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('layman_friendly', models.FloatField(blank=True, default=None, help_text='Layman-friendly', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('layman_friendly_weight', models.FloatField(default=1, help_text='Layman-friendly weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('diversity_inclusion', models.FloatField(blank=True, default=None, help_text='Diversity and Inclusion', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('diversity_inclusion_weight', models.FloatField(default=1, help_text='Diversity and Inclusion weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('backfire_risk', models.FloatField(blank=True, default=None, help_text='Resilience to backfiring risks', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('backfire_risk_weight', models.FloatField(default=1, help_text='Resilience to backfiring risks weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('better_habits', models.FloatField(blank=True, default=None, help_text='Encourages better habits', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('better_habits_weight', models.FloatField(default=1, help_text='Encourages better habits weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('entertaining_relaxing', models.FloatField(blank=True, default=None, help_text='Entertaining and relaxing', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('entertaining_relaxing_weight', models.FloatField(default=1, help_text='Entertaining and relaxing weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, help_text='Expert (user) who left the rating', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='backend.userpreferences')),
                ('video_1', models.ForeignKey(blank=True, db_constraint=False, help_text='Left video to compare', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='backend.video')),
                ('video_2', models.ForeignKey(blank=True, db_constraint=False, help_text='Right video to compare', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='backend.video')),
            ],
            options={
                'verbose_name': 'historical expert rating',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
