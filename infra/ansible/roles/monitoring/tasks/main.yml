- name: Check if Grafana certificates are already present
  stat:
    path: /etc/letsencrypt/live/{{grafana_domain_name}}/fullchain.pem
  register: grafana_cert_file
  when: letsencrypt_email is defined

- name: Stop Nginx if Grafana certificates are not present
  systemd:
    name: nginx
    state: stopped
  when: letsencrypt_email is defined and grafana_cert_file.stat.exists == False

- name: Run Certbot for Grafana domain
  shell:
    cmd: "certbot certonly --standalone -d {{grafana_domain_name}} -n --agree-tos -m {{letsencrypt_email}}"
    creates: /etc/letsencrypt/live/{{grafana_domain_name}}/fullchain.pem
  when: letsencrypt_email is defined

- name: Install GeoIP database
  apt:
    name:
      - geoip-database
      # - geoip-database-extra
    install_recommends: no
    update_cache: yes

- name: Add Buster repository
  apt_repository:
    repo: "deb {{buster_mirror}} buster main"
    state: present

- name: Install GeoIP database extra from Buster
  apt:
    name:
      - geoip-database-extra
    install_recommends: no
    update_cache: yes

- name: Copy Nginx log format
  copy:
    src: nginx-log-format.conf
    dest: /etc/nginx/conf.d/nginx-log-format.conf
  notify: Reload Nginx

- name: Copy Nginx stub_status endpoint configuration
  copy:
    src: stub_status
    dest: /etc/nginx/sites-available/stub_status
  notify: Reload Nginx

- name: Enable Nginx stub_status endpoint
  file:
    src: /etc/nginx/sites-available/stub_status
    dest: /etc/nginx/sites-enabled/stub_status
    state: link
  notify: Reload Nginx

- meta: flush_handlers

- name: Install Prometheus and exporters
  apt:
    name:
      - prometheus
      - prometheus-node-exporter
      - prometheus-nginx-exporter
      - prometheus-postgres-exporter
    install_recommends: no
    update_cache: yes

- name: Enable and start Prometheus
  systemd:
    name: prometheus
    state: started
    enabled: yes
    daemon_reload: yes

- name: Enable and start Prometheus node exporter
  systemd:
    name: prometheus-node-exporter
    state: started
    enabled: yes
    daemon_reload: yes

- name: Enable and start Prometheus Nginx exporter
  systemd:
    name: prometheus-nginx-exporter
    state: started
    enabled: yes
    daemon_reload: yes

- name: Add Nginx exporter to Prometheus configuration
  blockinfile:
    path: /etc/prometheus/prometheus.yml
    marker: "# {mark} ANSIBLE MANAGED BLOCK nginx"
    block: |
      #
        - job_name: nginx
          static_configs:
            - targets: ['localhost:9113']
  notify: Reload Prometheus

- name: Connect to test database and remove an existing user's password
  postgresql_user:
    db: postgres
    user: prometheus
  become: yes
  become_user: postgres
  notify:
    - Copy Postgresql exporter database user creation script
    - Create Postgresql exporter database user
    - Restart Prometheus Postgresql exporter

- meta: flush_handlers

- name: Configure Postgresql exporter connection string
  lineinfile:
    path: /etc/default/prometheus-postgres-exporter
    regexp: "^DATA_SOURCE_NAME="
    line: "DATA_SOURCE_NAME='user=prometheus host=/run/postgresql dbname=postgres'"
  notify: Restart Prometheus Postgresql exporter

- name: Enable and start Prometheus Postgresql exporter
  systemd:
    name: prometheus-postgres-exporter
    state: started
    enabled: yes
    daemon_reload: yes

- name: Add Postgresql exporter to Prometheus configuration
  blockinfile:
    path: /etc/prometheus/prometheus.yml
    marker: "# {mark} ANSIBLE MANAGED BLOCK postgresql"
    block: |
      #
        - job_name: postgresql
          static_configs:
            - targets: ['localhost:9187']
  notify: Reload Prometheus

- name: Add Django exporter over HTTP to Prometheus configuration
  blockinfile:
    path: /etc/prometheus/prometheus.yml
    marker: "# {mark} ANSIBLE MANAGED BLOCK django"
    block: |
      #
        - job_name: django
          metrics_path: '/monitoring/metrics'
          static_configs:
            - targets: ['{{api_domain_name}}']
  when: letsencrypt_email is not defined
  notify: Reload Prometheus

- name: Add Django exporter over HTTPS to Prometheus configuration
  blockinfile:
    path: /etc/prometheus/prometheus.yml
    marker: "# {mark} ANSIBLE MANAGED BLOCK django"
    block: |
      #
        - job_name: django
          metrics_path: '/monitoring/metrics'
          scheme: 'https'
          static_configs:
            - targets: ['{{api_domain_name}}']
  when: letsencrypt_email is defined
  notify: Reload Prometheus

- meta: flush_handlers

- name: Add Grafana repository signing key
  apt_key:
    url: https://packages.grafana.com/gpg.key
    state: present

- name: Add Grafana repository
  apt_repository:
    repo: deb https://packages.grafana.com/oss/deb stable main
    state: present

- name: Install Grafana
  apt:
    name: grafana
    install_recommends: no
    update_cache: yes
  notify:
    - Reset Grafana admin password
    # - Set Grafana default organization role
    - Create Grafana OIDC application in Django database
    - Enable and restart Grafana
    - Create Grafana Prometheus datasource

- name: Setup Grafana server parameters
  blockinfile:
    path: /etc/grafana/grafana.ini
    insertafter: "\\[server\\]"
    marker: "# {mark} ANSIBLE MANAGED BLOCK SERVER"
    block: |
      root_url = {{grafana_scheme}}://{{grafana_domain_name}}/
      domain = {{grafana_domain_name}}
  notify:
    - Enable and restart Grafana

- name: Setup Grafana auth
  blockinfile:
    path: /etc/grafana/grafana.ini
    insertafter: "\\[auth\\]"
    marker: "# {mark} ANSIBLE MANAGED BLOCK AUTH"
    block: |
      disable_login_form = true
      ;oauth_auto_login = true
  notify:
    - Enable and restart Grafana

- name: Disable Grafana basic auth
  blockinfile:
    path: /etc/grafana/grafana.ini
    insertafter: "\\[auth\\.basic\\]"
    marker: "# {mark} ANSIBLE MANAGED BLOCK BASIC AUTH"
    block: |
      enabled = true
  notify:
    - Enable and restart Grafana

- name: Configure OIDC for Grafana
  blockinfile:
    path: /etc/grafana/grafana.ini
    insertafter: "\\[auth\\.generic_oauth\\]"
    marker: "# {mark} ANSIBLE MANAGED BLOCK OIDC"
    block: |
      enabled = true
      name = Django OAuth
      allow_sign_up = true
      client_id = {{grafana_oidc_client_id}}
      client_secret = {{grafana_oidc_client_secret}}
      scopes = openid
      auth_url = {{django_main_url}}/o/authorize/
      token_url = {{django_main_url}}/o/token/
      api_url = {{django_main_url}}/o/userinfo/
      role_attribute_strict = true
      role_attribute_path = role == 'admin' && 'Admin'
      name_attribute_path = username
  notify:
    - Enable and restart Grafana

- meta: flush_handlers

- name: Copy Nginx Grafana configuration
  template:
    src: grafana.j2
    dest: /etc/nginx/sites-available/grafana
  notify:
    - Reload Nginx

- name: Enable Nginx Grafana configuration
  file:
    src: /etc/nginx/sites-available/grafana
    dest: /etc/nginx/sites-enabled/grafana
    state: link
  notify:
    - Reload Nginx

# - name: Create Grafana users for administrators
#   community.grafana.grafana_user:
#     url: "http://127.0.0.1:3000"
#     url_username: admin
#     url_password: "{{grafana_admin_password}}"
#     validate_certs: no
#     login: "{{item.name}}"
#     name: "{{ item.fullname | default(item.name) }}"
#     email: "{{ item.email | default(item.name + '@xxx.xxx') }}"
#     password: yopyop # temporary before switching to SSO (in between Grafana is exposed only through an SSH tunnel)
#     is_admin: yes
#     # state: "{{ item.state | default('present') }}"
#     state: absent
#   with_items: "{{admin_users}}"

# https://grafana.com/docs/grafana/latest/administration/image_rendering/#grafana-image-renderer-plugin-and-remote-rendering-service
- name: Install Grafana image renderer plugin dependencies
  apt:
    name:
      - libxdamage1
      - libxext6
      - libxi6
      - libxtst6
      - libnss3
      - libcups2
      - libxss1
      - libxrandr2
      - libasound2
      - libatk1.0-0
      - libatk-bridge2.0-0
      - libpangocairo-1.0-0
      - libpango-1.0-0
      - libcairo2
      - libatspi2.0-0
      - libgtk3.0-cil
      - libgdk3.0-cil
      - libx11-xcb-dev
      - libgbm1
      - libxcb-dri3-0 # undocumented but needed
      - libxshmfence1 # will be needed soon
    install_recommends: no
    update_cache: yes
  when: discord_infra_alert_webhook is defined and discord_infra_alert_webhook != ""

- name: Set permissions on Grafana plugins directory
  file:
    path: /var/lib/grafana/plugins
    state: directory
    owner: grafana
    group: grafana

- name: Install Grafana plugins
  community.grafana.grafana_plugin:
    name: "{{item.name}}"
    version: "{{item.version}}"
  with_items:
    - name: grafana-image-renderer
      version: "3.2.1"
  when: discord_infra_alert_webhook is defined and discord_infra_alert_webhook != ""
  notify: Enable and restart Grafana

- name: Create Discord notification channel
  register: discord_notification_channel
  community.grafana.grafana_notification_channel:
    grafana_url: "http://127.0.0.1:3000"
    url_username: admin
    url_password: "{{grafana_admin_password}}"
    validate_certs: no
    uid: discord
    name: Tournesol Discord
    type: discord
    discord_url: "{{discord_infra_alert_webhook}}"
    is_default: yes
    include_image: yes
    reminder_frequency: 5m
  when: discord_infra_alert_webhook is defined and discord_infra_alert_webhook != ""

- name: Create Grafana dashboards
  community.grafana.grafana_dashboard:
    grafana_url: "http://127.0.0.1:3000"
    url_username: admin
    url_password: "{{grafana_admin_password}}"
    validate_certs: no
    dashboard_id: "{{item.id}}"
    dashboard_revision: "{{item.rev}}"
  with_items:
    - id: 1860 # Node Exporter Full
      rev: 23
    - id: 9628 # PostgreSQL Database
      rev: 7
    - id: 12708 # NGINX exporter
      rev: 1
    - id: 9528 # a Django Prometheus
      rev: 1
    # This one has been forked and is imported in the logging role
    # - id: 13865 # Analytics - NGINX / LOKI v2+ Data Source / Promtail v2+ Tool
    #   rev: 6

- name: Write Grafana secrets into root's home
  template:
    dest: "/root/{{item}}"
    src: "{{item}}.j2"
    mode: u=rw,go=
  with_items:
    - grafana_admin_password
    - grafana_oidc_client_id
    - grafana_oidc_client_secret

- name: Copy external URLs monitoring script
  template:
    dest: /usr/local/bin/external-urls-monitoring.sh
    src: external-urls-monitoring.sh.j2
    mode: a=rx

- name: Copy external URLs monitoring service
  copy:
    dest: /etc/systemd/system/external-urls-monitoring.service
    src: external-urls-monitoring.service

- name: Copy external URLs monitoring timer
  copy:
    dest: /etc/systemd/system/external-urls-monitoring.timer
    src: external-urls-monitoring.timer

- name: Enable and start external URLs monitoring timer
  systemd:
    name: external-urls-monitoring.timer
    state: started
    enabled: yes
    daemon_reload: yes
