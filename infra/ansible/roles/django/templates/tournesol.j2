server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    return 444;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

map $sent_http_content_type $frontend_expires {
    default             off;
    # index page (html), and translations (json) should be
    # revalidated on every visit.
    text/html           0;
    application/json    0;
}

server {
    client_max_body_size 100M;

    server_name {{domain_name}};

    keepalive_timeout 5;

    error_page 503 @503;

    location / {
        {% if maintenance %}
            return 503;
        {% else %}
            root /srv/tournesol-frontend;
            try_files $uri @index;
            expires $frontend_expires;
        {% endif %}
    }

    location @index {
        root /srv/tournesol-frontend;
        sub_filter '__META_OG_IMAGE__' '$scheme://{{api_domain_name}}/preview$request_uri';
        sub_filter '__META_OG_URL__' '$scheme://$server_name$request_uri';
        try_files /index.html =404;
    }

    location @503 {
        root /srv/maintenance;
        try_files $uri /index.html =404;
    }

{% if letsencrypt_email is defined %}
    listen 443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/{{domain_name}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{domain_name}}/privkey.pem;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options nosniff;
    add_header Strict-Transport-Security "max-age=300; includeSubDomains; preload; always;";
{% else %}
    listen 80;
{% endif %}
}

server {
    client_max_body_size 100M;

    server_name {{api_domain_name}};

    keepalive_timeout 5;

    location /static/ {
        root /var/www/html;
    }

    location /media/ {
        internal;
        alias /var/www/html/media;
    }

    location /monitoring/ {
        allow 127.0.0.1;
        allow ::1;
        deny all;
        access_log off;
        proxy_redirect off;
        proxy_buffering off;
        proxy_pass http://unix:/run/gunicorn.sock;
    }

    location / {
        {% if maintenance %}
            return 503;
        {% else %}
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_redirect off;
            proxy_buffering off;
            proxy_pass http://unix:/run/gunicorn.sock;
        {% endif %}
    }

{% if letsencrypt_email is defined %}
    listen 443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/{{api_domain_name}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{api_domain_name}}/privkey.pem;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options nosniff;
    add_header Strict-Transport-Security "max-age=300; includeSubDomains; preload; always;";
{% else %}
    listen 80;
{% endif %}
}

{% if letsencrypt_email is defined %}
server {
    if ($host = {{domain_name}}) {
        return 301 https://$host$request_uri;
    }
    if ($host = {{api_domain_name}}) {
        return 301 https://$host$request_uri;
    }
    if ($host = {{mediawiki_domain_name}}) {
        return 301 https://$host$request_uri;
    }
    if ($host = {{grafana_domain_name}}) {
        return 301 https://$host$request_uri;
    }

    listen 80 deferred;

    server_name {{domain_name}} {{api_domain_name}} {{mediawiki_domain_name}} {{grafana_domain_name}};
    return 404;
}
{% endif %}
