- name: Install Python and virtualenv
  apt:
    name:
      - python3.9
      - virtualenv
      - gettext  # Required by django to compile messages
    install_recommends: no
    update_cache: yes

- name: Create Gunicorn user
  user:
    name: gunicorn
    system: yes
    create_home: yes

- name: Create Django database
  postgresql_db:
    name: "{{django_database_name}}"
  become: yes
  become_user: postgres

- name: Create Django database user
  postgresql_user:
    name: "{{django_database_user}}"
    password: "{{django_database_password}}"
    db: "{{django_database_name}}"
    priv: "CREATE" # Used to create pg extensions in Django migrations
  become: yes
  become_user: postgres

- name: Create Django settings directory
  file:
    path: /etc/tournesol
    state: directory
    mode: 0750
    owner: root
    group: gunicorn

- name: Copy Django settings
  template:
    src: settings.yaml.j2
    dest: /etc/tournesol/settings.yaml
    mode: 0640
    owner: root
    group: gunicorn
    backup: true
  notify: Restart Gunicorn

- name: Copy Django OIDC RSA private key
  template:
    src: django_oidc_rsa_private_key.j2
    dest: /root/django_oidc_rsa_private_key
    mode: u=rw,g=,o=
  notify:
    - Create Swagger UI OAuth application in Django database

- name: Copy Swagger UI OAuth client ID and secret
  template:
    src: "{{item}}.j2"
    dest: "/root/{{item}}"
    mode: u=rw,g=,o=
  with_items:
    - swagger_ui_oauth2_client_id
    - swagger_ui_oauth2_client_secret

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: gunicorn
    group: gunicorn
  loop:
    - /srv/tournesol-backend  # Django application directory
    - /srv/solidago  # Solidago package directory
    - /home/gunicorn/.ansible/tmp  # remote_tmp directory

- name: Copy Django application repository
  synchronize:
    src: "/home/git/tournesol/backend/"
    dest: /srv/tournesol-backend
    archive: no
    recursive: yes
    delete: yes
    checksum: yes
    rsync_opts:
      - "--exclude=venv/"
      - "--exclude=*.pyc"
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: gunicorn
  notify:
    - Migrate Django database
    - Compile Django messages
    - Create database cache
    - Collect Django static assets
    - Restart Gunicorn
    - Notify backend upgrade

- name: Copy Solidago directory
  synchronize:
    src: "/home/git/tournesol/solidago/"
    dest: /srv/solidago
    archive: no
    recursive: yes
    delete: yes
    checksum: yes
    rsync_opts:
      - "--exclude=*.pyc"
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: gunicorn
  notify:
    - Restart Gunicorn
    - Notify backend upgrade

- name: Create Virtualenv for Django project
  pip:
    name:
      - "gunicorn==20.1.0"
      - "uvicorn[standard]==0.22.0"
      - "pip==23.1.2"
    virtualenv: /srv/tournesol-backend/venv
    virtualenv_python: python3.9
  become: yes
  become_user: gunicorn
  notify: Restart Gunicorn

- name: Install requirements for Django project
  pip:
    chdir: /srv/tournesol-backend
    requirements: /srv/tournesol-backend/requirements.txt
    virtualenv: /srv/tournesol-backend/venv
    virtualenv_python: python3.9
  become: yes
  become_user: gunicorn
  notify: Restart Gunicorn

- name: Copy Gunicorn service file
  template:
    src: gunicorn.service.j2
    dest: /etc/systemd/system/gunicorn.service
  notify: Restart Gunicorn

- name: Copy Gunicorn socket file
  copy:
    src: gunicorn.socket
    dest: /etc/systemd/system/gunicorn.socket

- name: Create Django media directory
  file:
    path: /var/www/html/media
    owner: gunicorn
    group: gunicorn
    mode: u=rwx,g=rx,o=rx
    state: directory

- name: Create static assets directory
  file:
    path: /var/www/html/static
    owner: gunicorn
    group: gunicorn
    mode: u=rwx,g=rx,o=rx
    state: directory
  notify:
    - Collect Django static assets

- name: Enable and start Gunicorn
  systemd:
    name: gunicorn.socket
    enabled: true
    state: started
    daemon_reload: true

- name: Copy gunicorn snippet
  copy:
    src: gunicorn_proxy.conf
    dest: /etc/nginx/snippets/

- name: Create block_tor snippet
  block:
  - find:
      paths: /etc/nginx/snippets
      patterns: block_tor.conf
      age: -4d
    register: find_snippet

  - name: Generate block_tor snippet
    shell: >
      wget -qO- https://check.torproject.org/exit-addresses
      | grep ExitAddress
      | cut -d ' ' -f 2
      | sort -u
      | sed "s/^/deny /g; s/$/;/g"
      > /etc/nginx/snippets/block_tor.conf
    when: find_snippet.matched == 0

- name: Copy Nginx configuration
  template:
    src: tournesol.j2
    dest: /etc/nginx/sites-available/tournesol
  notify:
    - Reload Nginx

- name: Enable Nginx configuration
  file:
    src: /etc/nginx/sites-available/tournesol
    dest: /etc/nginx/sites-enabled/tournesol
    state: link
  notify: Reload Nginx

- meta: flush_handlers

- name: Copy Post on Discord
  template:
    dest: /usr/local/bin/post-on-discord.sh
    src: post-on-discord.sh.j2
    owner: gunicorn
    group: gunicorn
    mode: u=rx

- name: Copy ML training service
  template:
    dest: /etc/systemd/system/ml-train.service
    src: ml-train.service.j2

- name: Copy ML training timer
  template:
    dest: /etc/systemd/system/ml-train.timer
    src: ml-train.timer.j2

- name: Enable and start ML training timer
  systemd:
    name: ml-train.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: create dataset

- name: Copy Tournesol API create dataset service
  template:
    dest: /etc/systemd/system/tournesol-api-create-dataset.service
    src: tournesol-api-create-dataset.service.j2

- name: Copy Tournesol API create dataset timer
  template:
    dest: /etc/systemd/system/tournesol-api-create-dataset.timer
    src: tournesol-api-create-dataset.timer.j2

- name: Enable and start Tournesol API create dataset timer
  systemd:
    name: tournesol-api-create-dataset.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: sessions clean-up

- name: Copy Tournesol API clearsessions service
  template:
    dest: /etc/systemd/system/tournesol-api-clearsessions.service
    src: tournesol-api-clearsessions.service.j2

- name: Copy Tournesol API clearsessions timer
  template:
    dest: /etc/systemd/system/tournesol-api-clearsessions.timer
    src: tournesol-api-clearsessions.timer.j2

- name: Enable and start Tournesol API clearsessions timer
  systemd:
    name: tournesol-api-clearsessions.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: refresh token clean-up

- name: Copy Tournesol API cleartokens service
  template:
    dest: /etc/systemd/system/tournesol-api-cleartokens.service
    src: tournesol-api-cleartokens.service.j2

- name: Copy Tournesol API cleartokens timer
  template:
    dest: /etc/systemd/system/tournesol-api-cleartokens.timer
    src: tournesol-api-cleartokens.timer.j2

- name: Enable and start Tournesol API cleartokens timer
  systemd:
    name: tournesol-api-cleartokens.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: inactive users clean-up

- name: Copy Tournesol API delete-inactive-users service
  template:
    dest: /etc/systemd/system/tournesol-api-delete-inactive-users.service
    src: tournesol-api-delete-inactive-users.service.j2

- name: Copy Tournesol API delete-inactive-users timer
  template:
    dest: /etc/systemd/system/tournesol-api-delete-inactive-users.timer
    src: tournesol-api-delete-inactive-users.timer.j2

- name: Enable and start Tournesol API delete-inactive-users timer
  systemd:
    name: tournesol-api-delete-inactive-users.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: watch account creation hourly

- name: Copy Tournesol API watch-account-creation-1h service
  template:
    dest: /etc/systemd/system/tournesol-api-watch-account-creation-1h.service
    src: tournesol-api-watch-account-creation.service.j2
  vars:
    since_n_hours: 1
    n_accounts: 5

- name: Copy Tournesol API watch-account-creation-1h timer
  template:
    dest: /etc/systemd/system/tournesol-api-watch-account-creation-1h.timer
    src: tournesol-api-watch-account-creation-1h.timer.j2

- name: Enable and start Tournesol API watch-account-creation-1h timer
  systemd:
    name: tournesol-api-watch-account-creation-1h.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: watch account creation daily

- name: Copy Tournesol API watch-account-creation-24h service
  template:
    dest: /etc/systemd/system/tournesol-api-watch-account-creation-24h.service
    src: tournesol-api-watch-account-creation.service.j2
  vars:
    since_n_hours: 24
    n_accounts: 10

- name: Copy Tournesol API watch-account-creation-24h timer
  template:
    dest: /etc/systemd/system/tournesol-api-watch-account-creation-24h.timer
    src: tournesol-api-watch-account-creation-24h.timer.j2

- name: Enable and start Tournesol API watch-account-creation-24h timer
  systemd:
    name: tournesol-api-watch-account-creation-24h.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: watch the total number of accounts daily

- name: Copy Tournesol API watch-account-number-yesterday service
  template:
    dest: /etc/systemd/system/tournesol-api-watch-account-number-yesterday.service
    src: tournesol-api-watch-account-number-yesterday.service.j2

- name: Copy Tournesol API watch-account-number-yesterday timer
  template:
    dest: /etc/systemd/system/tournesol-api-watch-account-number-yesterday.timer
    src: tournesol-api-watch-account-number-yesterday.timer.j2

- name: Enable and start Tournesol API watch-account-number-yesterday timer
  systemd:
    name: tournesol-api-watch-account-number-yesterday.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: Twitterbot daily tweet

- name: Copy twitterbot service
  template:
    dest: /etc/systemd/system/tournesol-twitterbot.service
    src: tournesol-twitterbot.service.j2

- name: Copy twitterbot timer
  template:
    dest: /etc/systemd/system/tournesol-twitterbot.timer
    src: tournesol-twitterbot.timer.j2

- name: Enable and start Tournesol twitterbot timer
  systemd:
    name: tournesol-twitterbot.timer
    state: "{{ 'started' if tournesol_twitterbot_schedule is defined else 'stopped' }}"
    enabled: "{{ 'yes' if tournesol_twitterbot_schedule is defined else 'no' }}"
    daemon_reload: yes

# scheduled task: Twitterbot monthly top contributors tweet

- name: Copy twitterbot top contributors service
  template:
    dest: /etc/systemd/system/tournesol-twitterbot-top-contributors.service
    src: tournesol-twitterbot-top-contributors.service.j2

- name: Copy twitterbot top contributor timer
  template:
    dest: /etc/systemd/system/tournesol-twitterbot-top-contributors.timer
    src: tournesol-twitterbot-top-contributors.timer.j2

- name: Enable and start Tournesol twitterbot top contributors timer
  systemd:
    name: tournesol-twitterbot-top-contributors.timer
    state: "{{ 'started' if tournesol_twitterbot_top_contributors_schedule is defined else 'stopped' }}"
    enabled: "{{ 'yes' if tournesol_twitterbot_top_contributors_schedule is defined else 'no' }}"
    daemon_reload: yes

# scheduled task: Sync Youtube playlists

- name: Copy tournesol-yt-playlists service
  template:
    dest: /etc/systemd/system/tournesol-yt-playlists.service
    src: tournesol-yt-playlists.service.j2

- name: Copy tournesol-yt-playlists timer
  template:
    dest: /etc/systemd/system/tournesol-yt-playlists.timer
    src: tournesol-yt-playlists.timer.j2

- name: Enable and start tournesol-yt-playlists timer
  systemd:
    name: tournesol-yt-playlists.timer
    state: "{{ 'started' if tournesol_yt_playlists_schedule is defined else 'stopped' }}"
    enabled: "{{ 'yes' if tournesol_yt_playlists_schedule is defined else 'no' }}"
    daemon_reload: yes
