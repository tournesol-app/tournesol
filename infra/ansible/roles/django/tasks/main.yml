- name: Install Python and virtualenv
  apt:
    name:
      - python3.9
      - virtualenv
      - gettext  # Required by django to compile messages
    install_recommends: no
    update_cache: yes

- name: Create Gunicorn user
  user:
    name: gunicorn
    system: yes
    create_home: yes

- name: Create Django database
  postgresql_db:
    name: "{{django_database_name}}"
  become: yes
  become_user: postgres

- name: Create Django database user
  postgresql_user:
    name: "{{django_database_user}}"
    password: "{{django_database_password}}"
    db: "{{django_database_name}}"
  become: yes
  become_user: postgres

- name: Create Django settings directory
  file:
    path: /etc/tournesol
    state: directory

- name: Copy Django settings
  template:
    src: settings.yaml.j2
    dest: /etc/tournesol/settings.yaml
  notify: Restart Gunicorn

- name: Copy Django OIDC RSA private key
  template:
    src: django_oidc_rsa_private_key.j2
    dest: /root/django_oidc_rsa_private_key
    mode: u=rw,g=,o=
  notify:
    - Populate Django DB from Public Dataset
    - Create Swagger UI OAuth application in Django database

- name: Copy Swagger UI OAuth client ID and secret
  template:
    src: "{{item}}.j2"
    dest: "/root/{{item}}"
    mode: u=rw,g=,o=
  with_items:
    - swagger_ui_oauth2_client_id
    - swagger_ui_oauth2_client_secret

- name: Create Django application directory
  file:
    path: /srv/tournesol-backend
    state: directory
    owner: gunicorn
    group: gunicorn

- name: Create remote_tmp directory for Gunicorn user
  file:
    path: /home/gunicorn/.ansible/tmp
    state: directory
    owner: gunicorn
    group: gunicorn

- name: Copy Django application repository
  synchronize:
    src: "/home/git/tournesol/backend/"
    dest: /srv/tournesol-backend
    archive: no
    recursive: yes
    delete: yes
    checksum: yes
    rsync_opts:
      - "--exclude=venv/"
      - "--exclude=*.pyc"
  delegate_to: "{{ inventory_hostname }}"
  become: yes
  become_user: gunicorn
  notify:
    - Migrate Django database
    - Compile Django messages
    - Create database cache
    - Collect Django static assets
    - Restart Gunicorn
    - Notify backend upgrade

- name: Create Virtualenv for Django project
  pip:
    name:
      - gunicorn
      - uvicorn
    virtualenv: /srv/tournesol-backend/venv
    virtualenv_python: python3.9
  become: yes
  become_user: gunicorn
  notify: Restart Gunicorn

- name: Install requirements for Django project
  pip:
    requirements: /srv/tournesol-backend/requirements.txt
    virtualenv: /srv/tournesol-backend/venv
    virtualenv_python: python3.9
  become: yes
  become_user: gunicorn
  notify: Restart Gunicorn

- name: Copy Gunicorn service file
  template:
    src: gunicorn.service.j2
    dest: /etc/systemd/system/gunicorn.service
  notify: Restart Gunicorn

- name: Copy Gunicorn socket file
  copy:
    src: gunicorn.socket
    dest: /etc/systemd/system/gunicorn.socket

- name: Create static assets directory
  file:
    path: /var/www/html/static
    owner: gunicorn
    group: gunicorn
    mode: u=rwx,g=rx,o=rx
    state: directory
  notify:
    - Collect Django static assets

- name: Enable and start Gunicorn
  systemd:
    name: gunicorn.socket
    enabled: true
    state: started
    daemon_reload: true

- name: Copy Nginx configuration
  template:
    src: tournesol.j2
    dest: /etc/nginx/sites-available/tournesol
  notify:
    - Reload Nginx

- name: Enable Nginx configuration
  file:
    src: /etc/nginx/sites-available/tournesol
    dest: /etc/nginx/sites-enabled/tournesol
    state: link
  notify: Reload Nginx

- meta: flush_handlers

- name: Copy Discord ML training failure alert
  template:
    dest: /usr/local/bin/discord-ml-fail-alert.sh
    src: discord-ml-fail-alert.sh.j2
    mode: a=rx

- name: Copy ML training service
  template:
    dest: /etc/systemd/system/ml-train.service
    src: ml-train.service.j2

- name: Copy ML training timer
  template:
    dest: /etc/systemd/system/ml-train.timer
    src: ml-train.timer.j2

- name: Install requirements for ML training
  pip:
    requirements: /srv/tournesol-backend/ml/ml_requirements.txt
    extra_args: "--no-cache-dir"
    virtualenv: /srv/tournesol-backend/venv
    virtualenv_python: python3.9
  become: yes
  become_user: gunicorn
  notify: Restart Gunicorn

- name: Enable and start ML training timer
  systemd:
    name: ml-train.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: refresh token clean-up

- name: Copy Discord Tournesol API cleartokens failure alert
  template:
    dest: /usr/local/bin/discord-tournesolapi-cleartokens-fail-alert.sh
    src: discord-tournesolapi-cleartokens-fail-alert.sh.j2
    mode: a=rx

- name: Copy Tournesol API cleartokens service
  template:
    dest: /etc/systemd/system/tournesol-api-cleartokens.service
    src: tournesol-api-cleartokens.service.j2

- name: Copy Tournesol API cleartokens timer
  template:
    dest: /etc/systemd/system/tournesol-api-cleartokens.timer
    src: tournesol-api-cleartokens.timer.j2

- name: Enable and start Tournesol API cleartokens timer
  systemd:
    name: tournesol-api-cleartokens.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: inactive users clean-up

- name: Copy Discord Tournesol API delete-inactive-users failure alert
  template:
    dest: /usr/local/bin/discord-tournesolapi-deleteinactiveusers-fail-alert.sh
    src: discord-tournesolapi-deleteinactiveusers-fail-alert.sh.j2
    mode: a=rx

- name: Copy Tournesol API delete-inactive-users service
  template:
    dest: /etc/systemd/system/tournesol-api-delete-inactive-users.service
    src: tournesol-api-delete-inactive-users.service.j2

- name: Copy Tournesol API delete-inactive-users timer
  template:
    dest: /etc/systemd/system/tournesol-api-delete-inactive-users.timer
    src: tournesol-api-delete-inactive-users.timer.j2

- name: Enable and start Tournesol API delete-inactive-users timer
  systemd:
    name: tournesol-api-delete-inactive-users.timer
    state: started
    enabled: yes
    daemon_reload: yes

# scheduled task: Twitterbot

- name: Copy twitterbot failure alert script
  template:
    dest: /usr/local/bin/discord-twitterbot-fail-alert.sh
    src: discord-twitterbot-fail-alert.sh.j2
    mode: a=rx

- name: Copy twitterbot service
  template:
    dest: /etc/systemd/system/tournesol-twitterbot.service
    src: tournesol-twitterbot.service.j2

- name: Copy twitterbot timer
  template:
    dest: /etc/systemd/system/tournesol-twitterbot.timer
    src: tournesol-twitterbot.timer.j2

- name: Enable and start Tournesol twitterbot timer
  systemd:
    name: tournesol-twitterbot.timer
    state: "{{ 'started' if tournesol_twitterbot_schedule is defined else 'stopped' }}"
    enabled: "{{ 'yes' if tournesol_twitterbot_schedule is defined else 'no' }}"
    daemon_reload: yes
