- name: Restore entire postgres backup
  when: restore_backup_name is defined and restore_backup_name != ""
  block:
    - name: Stop Gunicorn
      systemd:
        name: gunicorn
        state: stopped
        daemon_reload: true

    - name: Restore backup file
      shell:
        cmd: |
          BACKUP_FILE=/backups/tournesol/db/{{restore_backup_name}}/tournesol.custom
          if ! test -e "$BACKUP_FILE"; then
            echo "Backup file '$BACKUP_FILE' does not exist"
            return 1
          fi
          dropdb -e tournesol --if-exists --force
          pg_restore -v --exit-on-error --dbname postgres --create $BACKUP_FILE 2>&1
      become: yes
      become_user: postgres
      register: restore_result
      notify:
        - Restart Gunicorn
        - Migrate Django database
        - Create database cache

    - debug:
        var: restore_result.stdout_lines


- name: Restore postgres backup without overriding oauth applications
  when: external_backup_path is defined and external_backup_path != ""
  block:
    - name: Restore backup file
      shell:
        cmd: |
          BACKUP_FILE={{external_backup_path}}/tournesol.custom
          if ! test -e "$BACKUP_FILE"; then
            echo "Backup file '$BACKUP_FILE' does not exist"
            return 1
          fi
          psql -d tournesol -c "TRUNCATE oauth2_provider_accesstoken CASCADE"
          pg_restore -v --single-transaction --clean -d tournesol $BACKUP_FILE \
            -L <(pg_restore -l $BACKUP_FILE | awk '!/oauth2_provider/ || /FK CONSTRAINT/' ) 2>&1
      args:
        executable: /bin/bash
      become: yes
      become_user: postgres
      notify:
        - Migrate Django database
        - Create database cache
      register: restore_result

    - debug:
        var: restore_result.stdout_lines
